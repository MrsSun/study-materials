
### 内存结构
参考学习资料：https://pdai.tech/md/java/jvm/java-jvm-struct.html#%E5%9B%9B%E3%80%81%E5%A0%86%E5%86%85%E5%AD%98
https://mp.weixin.qq.com/s/fg2Dy0Dbhcrn5QaNydp1WQ

1. 程序计数器 (
PC 寄存器用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。)
![img.png](img.png)
2. 虚拟方法栈
2. 本地方法栈
   栈是运行时的单位，而堆是存储的单位。</br>
———————————————————— </br>
栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放、放在哪。</br>
————————————————————</br>
3. 堆
4. 方法区 </br>
   1. 方法区（method area）只是 JVM 规范中定义的一个概念，用于存储类信息、常量池、静态变量、JIT编译后的代码等数据，并没有规定如何去实现它，不同的厂商有不同的实现。
      而永久代（PermGen）是 Hotspot 虚拟机特有的概念， Java8 的时候又被元空间取代了，永久代和元空间都可以理解为方法区的落地实现。</br>
   2. 永久代在物理存储上与堆是连续的， 所以受垃圾回收器管理
   3. jdk7 把静态变量、常量池转移到堆上，jdk8 把jdk7还存放在永久代的数据转移到元空间上，元空间存在本地内存上，也就是非堆，这样不受垃圾回收器管理
   4. 方法区存放的数据：方法区用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等
   



### 对象篼创建过程
1. 当Java虚拟机遇到一条字节码new指令时，首先将去检查这个指
   令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个
   符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必
   须先执行相应的类加载过程，
2. 在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对
   象所需内存的大小在类加载完成后便可完全确定
3. 虚拟机必须将分配到的内存空间（但不包括
   对象头）都初始化为零值
4. Java虚拟机还要对对象进行必要的设置，例如这个对象
   是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码（实
   际上对象的哈希码会延后到真正调用Object::hashCode()方法时才计
   算）、对象的GC分代年龄等信息。这些信息存放在对象的对象头
   （Object Header）之中。根据虚拟机当前运行状态的不同，如是否启
   用偏向锁等，对象头会有不同的设置方式。
5. 在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已
   经产生了。但是从Java程序的视角看来，对象创建才刚刚开始——构
   造函数，即Class文件中的<init>()方法还没有执行，所有的字段都为
   默认的零值，对象需要的其他资源和状态信息也还没有按照预定的意
   图构造好。

### 对象的内存布局
1. 对象头：markword（GC年龄、锁状态，hashcode） </br>
   类型指针（即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例。
   并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身）</br>
   数据长度 (果对象是一个Java数组，那在对象头中还必须
   有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象
   的元数据信息确定Java对象的大小，但是如果数组的长度是不确定
   的，将无法通过元数据中的信息推断出数组的大小。
2. 实例数据：对象真正存储的有效信息，即我们在程序
   代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，
   还是在子类中定义的字段都必须记录起来。
3. 填充数据

### 垃圾回收算法
#### 标记算法
对象引用计数器、可达性算法
#### 垃圾收集算法
标记清除、标记复制、标记整理

#### 类的文件结构
![img_2.png](img_2.png)
magicNumber
文件版本说明：当前存放文件的地址、最后修改时间、文件大小、md5值，编译自哪个文件、jdk主次版本号
常量池：字面量（类似java常量，如文本字符串）、符号引用（类和接口的全限定名；字段的名称、属性、类型；方法的名称、属性、类型）
方法表集合：类中方法的描述，方法的名称、属性、类型、code（最大操作数栈；局部变量需要的存储空间大小，基本单位是slot，一个slot=4个字节；参数的个数）


#### 类加载步骤
一个类型的生命周期会经过：加载、验证、准备、解析、初始化、使用、卸载
#### 初始化阶段处罚时机
![img_1.png](img_1.png)


引申问题：
什么是SPI？
如何写一个类加载器？